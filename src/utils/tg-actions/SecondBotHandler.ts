import { KEYBOARD } from "@/src/keyboard";
import { BOTS, bot } from "@/src";
import { FRBot } from "@/src/utils/bots";
import { closeKeyboard } from "./closeKeyboard";

/** --------------------------------------------------- *
 *                   Second bot handlers                *
 * ---------------------------------------------------- */
export let frbot2: FRBot | undefined;
export default function SecondBotHandlers() {
  // –ó–∞–ø—É—Å–∫ –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞
  bot.onText(new RegExp(KEYBOARD.startSecondBot), async (msg) => {
    const frbotStatus = BOTS.second.status;
    if (frbotStatus === "running") {
      bot.sendMessage(msg.chat.id, "‚ùå –û—à–∏–±–∫–∞: –í—Ç–æ—Ä–æ–π –±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω");
      return;
    }
    frbot2 = new FRBot({
      id: 2,
      CFRV: 0,
      NFRV: 0,
      updateInterval: 60 * 3,
      tgBot: bot,
      msg,
    });
    frbot2.start();
    BOTS.second.status = "running";
    closeKeyboard(msg, "üöÄ");
  });

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞
  bot.onText(new RegExp(KEYBOARD.stopSecondBot), async (msg) => {
    const frbotStatus = BOTS.second.status;
    if (frbotStatus === "stopped") {
      bot.sendMessage(msg.chat.id, "‚ùå –û—à–∏–±–∫–∞: –í—Ç–æ—Ä–æ–π –±–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
      return;
    }
    frbot2?.stop();
    BOTS.second.status = "stopped";
    closeKeyboard(msg, "üõë");
  });

  // –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫—Ç
  bot.onText(new RegExp(KEYBOARD.settingsSecondBot), async (msg) => {
    const settings = BOTS.second.settings;
    let settingsInfo = "–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞:\n\n";
    for (const key in settings) {
      settingsInfo += `‚Ä¢ ${key}: ${settings[key as keyof typeof settings]}\n`;
    }
    settingsInfo +=
      "\n –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –±–æ—Ç—ã, –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∏—Ö –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞";

    await bot.sendMessage(msg.chat.id, settingsInfo, {
      reply_markup: {
        force_reply: true,
        keyboard: [
          [
            {
              text: `2b NFRV: ${settings.NFRV}`,
            },
            {
              text: `2b CFRV: ${settings.CFRV}`,
            },
          ],
          [
            {
              text: `2b Update interval sec: ${settings.updateInterval}`,
            },
          ],
          [
            {
              text: KEYBOARD.closeMenu,
            },
          ],
        ],
      },
    });
  });

  // –ù–∞—Å—Ç—Ä–æ–∫–∞ NFRV
  bot.onText(/2b NFRV: (.+)/, async (msg, match) => {
    if (!match) return;
    const prompt = await bot.sendMessage(
      msg.chat.id,
      "–ü–µ—Ä–µ—à–ª–∏—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ 2b NFRV –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ",
      {
        reply_markup: {
          remove_keyboard: true,
        },
      },
    );

    bot.onReplyToMessage(msg.chat.id, prompt.message_id, async (reply) => {
      if (!reply.text) return;
      const nfrv = parseFloat(reply.text);
      if (isNaN(nfrv)) {
        bot.sendMessage(msg.chat.id, "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞");
        return;
      }
      BOTS.second.settings.NFRV = nfrv;

      bot.sendMessage(msg.chat.id, `‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ <b>2b NFRV</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: <b>${nfrv}</b>`, {
        parse_mode: "HTML",
      });
    });
  });

  // –ù–∞—Å—Ç—Ä–æ–∫–∞ CFRV
  bot.onText(/2b CFRV: (.+)/, async (msg, match) => {
    if (!match) return;
    const prompt = await bot.sendMessage(
      msg.chat.id,
      "–ü–µ—Ä–µ—à–ª–∏—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ 2b CFRV –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ",
      {
        reply_markup: {
          remove_keyboard: true,
        },
      },
    );

    bot.onReplyToMessage(msg.chat.id, prompt.message_id, async (reply) => {
      if (!reply.text) return;
      const cfrv = parseFloat(reply.text);
      if (isNaN(cfrv)) {
        bot.sendMessage(msg.chat.id, "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞");
        return;
      }
      BOTS.second.settings.CFRV = cfrv;

      bot.sendMessage(msg.chat.id, `‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ <b>2b CFRV</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: <b>${cfrv}</b>`, {
        parse_mode: "HTML",
      });
    });
  });

  // –ù–∞—Å—Ç—Ä–æ–∫–∞ Update interval
  bot.onText(/2b Update interval sec: (.+)/, async (msg, match) => {
    if (!match) return;
    const prompt = await bot.sendMessage(
      msg.chat.id,
      "–ü–µ—Ä–µ—à–ª–∏—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ 2b Update interval –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö",
      {
        reply_markup: {
          remove_keyboard: true,
        },
      },
    );

    bot.onReplyToMessage(msg.chat.id, prompt.message_id, async (reply) => {
      if (!reply.text) return;
      const updateInterval = parseInt(reply.text);
      if (isNaN(updateInterval)) {
        bot.sendMessage(msg.chat.id, "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞");
        return;
      }
      BOTS.second.settings.updateInterval = updateInterval;

      bot.sendMessage(
        msg.chat.id,
        `‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ <b>2b Update interval</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: <b>${updateInterval}</b>`,
        {
          parse_mode: "HTML",
        },
      );
    });
  });
}
