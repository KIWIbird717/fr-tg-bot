import TelegramBot from "node-telegram-bot-api";
import { FundingRateAnalisator } from "./utils/funding-rate.ts/index.ts.js";
import { commands } from "./commands.js";
import { BOTType } from "./types.js";
import dotenv from "dotenv";
import { Logger } from "./utils/logger.js";

dotenv.config();

try {
  const bot = new TelegramBot(process.env.API_KEY_BOT as string, {
    polling: {
      interval: 300,
      autoStart: true,
    },
  });

  const CONFIG = {
    bot: {
      NFRV: 0.01,
      CFRV: -0.02,
      updateInterval: 60 * 3,
    },
  };
  const BOT: BOTType = {
    runningFlag: false,
  };

  bot.on("polling_error", (err) => Logger.log(err));
  bot.setMyCommands(commands);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /set_cfrv
  bot.onText(/\/set_cfrv (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    if (!match) return;
    const cfrv = parseFloat(match[1]);

    if (!isNaN(cfrv)) {
      CONFIG.bot.CFRV = cfrv;
      bot.sendMessage(
        chatId,
        `‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ <b>CFRV</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: <b>${CONFIG.bot.CFRV}</b>`,
        { parse_mode: "HTML" },
      );
    } else {
      bot.sendMessage(chatId, `‚ùå –æ—à–∏–±–∫–∞: '${match[1]}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.`);
    }
  });
  bot.on("text", async (msg) => {
    if (msg.text !== "/set_cfrv") return;
    await bot.sendMessage(
      msg.chat.id,
      "‚ùå –æ—à–∏–±–∫–∞: –ù–µ –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ CFRV \n\n–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: /set_cfrv -0.02",
    );
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /set_nfrv
  bot.onText(/\/set_nfrv (.+)/, (msg, match) => {
    if (!match) return;
    const chatId = msg.chat.id;
    const nfrv = parseFloat(match[1]);

    if (!isNaN(nfrv)) {
      CONFIG.bot.NFRV = nfrv;
      bot.sendMessage(
        chatId,
        `‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ <b>NFRV</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: <b>${CONFIG.bot.NFRV}</b>`,
      );
    } else {
      bot.sendMessage(chatId, `–û—à–∏–±–∫–∞: '${match[1]}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.`);
    }
  });
  bot.on("text", async (msg) => {
    if (msg.text !== "/set_nfrv") return;
    await bot.sendMessage(
      msg.chat.id,
      "‚ùå –æ—à–∏–±–∫–∞: –ù–µ –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ NFRV \n\n–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: /set_nfrv 0.02",
    );
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /set_update_interval
  bot.onText(/\/set_update_interval (.+)/, (msg, match) => {
    if (!match) return;
    const chatId = msg.chat.id;
    const updateInterval = parseInt(match[1]);

    if (!isNaN(updateInterval)) {
      CONFIG.bot.updateInterval = updateInterval;
      bot.sendMessage(
        chatId,
        `‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ <b>updateInterval</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: <b>${CONFIG.bot.updateInterval}</b>`,
      );
    } else {
      bot.sendMessage(chatId, `–û—à–∏–±–∫–∞: '${match[1]}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.`);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /see_config
  bot.onText(/\/see_config/, (msg) => {
    const chatId = msg.chat.id;
    let settings = "";
    for (const key in CONFIG.bot) {
      settings += `‚Ä¢ ${key}: <b>${CONFIG.bot[key as keyof (typeof CONFIG)["bot"]]}</b>\n`;
    }
    bot.sendMessage(chatId, `‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:</b> \n\n${settings}`, {
      parse_mode: "HTML",
    });
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start_bot
  bot.onText(/\/start_bot/, (msg) => {
    const chatId = msg.chat.id;
    BOT.runningFlag = true;
    bot.sendMessage(chatId, "üü¢ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω</b> üü¢", { parse_mode: "HTML" });

    const funding = new FundingRateAnalisator({
      CFRV: CONFIG.bot.CFRV,
      NFRV: CONFIG.bot.NFRV,
    });

    const interval = setInterval(async () => {
      if (!BOT.runningFlag) {
        clearInterval(interval);
      }
      await funding.analise();
      const uniqueSymbols = funding.getSymbolsAvaliableToEnter;
      Logger.log("uniqueSymbols", uniqueSymbols);

      if (uniqueSymbols.length > 0) {
        console.log(uniqueSymbols, uniqueSymbols.length);
        let symbols_message = "";
        for (const symbol of uniqueSymbols) {
          symbols_message += `‚Ä¢ <b>${symbol.symbol}</b>   FR: ${
            Number(symbol.lastFundingRate) * 100
          }\n`;
        }
        const currTime = `–í—Ä–µ–º—è: ${new Date().toLocaleTimeString("ru-RU")}`;
        await bot.sendMessage(
          chatId,
          `üìà <b>–û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –≤—Ö–æ–¥–∞</b> \n\n${symbols_message}\n${currTime}`,
          { parse_mode: "HTML" },
        );
      }
    }, 1000 * CONFIG.bot.updateInterval);
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /stop_bot
  bot.onText(/\/stop_bot/, (msg) => {
    const chatId = msg.chat.id;
    BOT.runningFlag = false;
    bot.sendMessage(chatId, "üî¥ <b>–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b> üî¥", { parse_mode: "HTML" });
  });

  Logger.log("Bot is running");
} catch (error) {
  Logger.error(error);
}
